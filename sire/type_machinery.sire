; Copyright 2023 The Plunder Authors
; Use of this source code is governed by a BSD-style license that can be
; found in the LICENSE file.

#### type_machinery <- type_syntax

;;;; This module has to do with the representation of types within
;;;; the Sire interpreter state.
;;;;
;;;; {FORALL} is the constructor for a type.  (FORALL 3 e) means
;;;; (forall a b c. e).
;;;;
;;;; In Hindley-Milner, the forall can only occur on the outside of a type,
;;;; so there is no forall in the actual TypeExp structure, only at the
;;;; onset, in FORALL.
;;;;
;;;; {TCON} and {TVAR} are the constructors for type-expressions.
;;;;
;;;; TVAR references a type-variable (by index).
;;;;
;;;; TCON references a abstract type by binding-key, along with 0-or-more
;;;; type parameters.
;;;;
;;;; For example:
;;;;
;;;;     forall a. List (Either a a)
;;;;
;;;; Is represented as:
;;;;
;;;;      | FORALL 1
;;;;      | TCON getBinderKey#List
;;;;      ,   | TCON getBinderKey#Either
;;;;         ++ TVAR 0
;;;;         ++ TVAR 0

;;; Imports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:| sire
:| type_syntax


;;; Types ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

> Nat > Row (TNode a) > TNode a
(TCON key params)=[key params]

> a > TNode a
(TVAR key)=key

# record Type
| FORALL vars:Nat typ:(TNode Nat)


;;; Generating New Types ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= (bindType key name scheme ss)
@ [nex ctx scope modules props]=ss
@ bind  | PIN [key scheme [%K scheme] ctx name]
@ scope | tabPut scope name bind
@ props | tabPut props key  [typeName=name]
| [nex ctx scope modules props]

= (mkNewType name arity ss@[key ctx scope mods props])
^ bindType key name _ [inc-key ctx scope mods props]
| FORALL arity | TCON key | gen arity TVAR

= (lookupType name ss err ok)
@ [_ _ scope _ props]=ss
@ rex  | WORD name 0
@ bind | tabGet scope name
@ bRow | pinItem bind
@ k,v  | bRow
| ifz bind | err rex {undefined type}
| if (len v /= 2)
    | err rex {binding is not a type}
@ bindProps (getProps ss bRow)
@ name | tabGet bindProps {typeName}
| ifz name | err rex {binding is a type, but it isn't tied to a name!}
    ;
    ; TODO: can't we just use the binding name instead of having this the
    ; `typeName` property?
    ;
    ; TODO: Similarly, would it be better to store a new binding for
    ; the type of each binding and just store a #[ty=num] in the
    ; properties?  This would maybe make it possible to have the
    ; properties table not be scoped which would simplify things
    ; significantly.  Right now, we store fragments of the properties
    ; table in each module.  The advantage of this is that the properties
    ; table is not duplicated in every module.  But if this table is
    ; kept extremely small, then maybe that doesn't matter so much?
    ;
    ; TODO: Alternatively!  Maybe we put the properties *directly*
    ; on bindings and just don't allow them to be altered from another
    ; module.  This would make the current #backfill design impossible,
    ; but we could instead have backfill just create a new binding with
    ; the same name.
    ;
    ; So then, `sire_03_nat.add` would remain forever untyped, but
    ; stew_03_backfill.add could be an identical binding that does
    ; include a type.
| ok v

= (lookupTypeOf ss name rex err ok)
: _ bind     < getBind name ss rex err
@ scheme     | getProp ss bind {type}
| ifz scheme | err rex {binding is untyped}
| ok scheme


;;; Exports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

^-^
^-^ TCON TVAR
^-^ FORALL
^-^
^-^ bindType
^-^ mkNewType
^-^ lookupType lookupTypeOf
^-^
