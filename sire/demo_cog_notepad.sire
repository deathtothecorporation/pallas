;;; Copyright 2024 OPFN
;;; Use of this source code is governed by a BSD-style license that can be
;;; found in the LICENSE file.
;;
#### demo_notepad <- prelude

:| prelude
:| json
; :| datatype  [{#record} {#datatype} {#datacase}]

> Pin Bar
= favicon
| PIN
| barCat
, x#{89504e470d0a1a0a0000000d4948445200000020000000200806000000737a7a}
  x#{f4000000017352474200aece1ce9000002a0494441545847ed563f486a71183d}
  x#{95e054439448e06063818b91e09fc616079186280c4402876875484b51281c5a}
  x#{1a1a1491a2a2c9c121684c88444187748a828230515c44a2a17c9c1ff4309ecf}
  x#{7bf53d5f6ff05b1cbcbf73ce3ddf77bedf1d02d0c437d6d040c0c081ffde81c9}
  x#{c949f87c3e919368348a42a1d031332a950a5eaf573cb3bfbf8fa7a7a78ecf4b}
  x#{a660787818cfcfcf50abd5d8ddddfd09fe3b54a7d389783c8e7abd0e8a7f7b7b}
  x#{fb33013c1d8bc5e072b990cbe5a0d7eb3b029e9f9f637979198944024b4b4b92}
  x#{1b46d20122d8ed7601d86c3631353585979797b6c00a8502e57219e3e3e34230}
  x#{9d902a590246474751a954a0542a418b8f8e8edae21a8d465c5f5fe3e3e34308}
  x#{a518a992258020979797585c5c042d5e5959698b1b0c06b1bdbd8d4c260383c1}
  x#{20c52dfe972d60737313070707a8d56ae0a4bfbfbfff4290cd66313737879d9d}
  x#{1d8442a1bf2b607a7a1af7f7f7029456dfdcdc7c21a0a852a904a68683ca8195}
  x#{53b21d2058b158c4cccc8c783bbe656badadade1f8f8584456a3d1888195535d}
  x#{090887c3f0783ca0d5f3f3f35ff04f4f4fb1baba8a482402b7db2d87bbbb19e0}
  x#{d30b0b0bb8baba1253cec5c464b0464646443427262660b3d9904c26fb23a035}
  x#{e7b4fce4e4441071e2d3e9345e5f5fc5f66b341afd1140d44fabf9eb70380491}
  x#{dfef472010c0c5c505ac56ab6cf2ae62f889ca3e939cf6b30d6c07df9e2e6c6c}
  x#{6ce0f0f0b0bf02b866b9e1d80e923e3c3c88fe337e5aad168f8f8ffd1540f454}
  x#{2a058bc522acbfbbbbc3d9d9196e6f6fa1d3e9ba22efa9053cc4283292b49e02}
  x#{38907b7b7bd8dadafa3702666767c58709d731277e6c6c0c66b3595c44dd5657}
  x#{8ba8159cbd67cf59d56a550c64bbfb414a50cf02d6d7d7613299047e3e9f1717}
  x#{552fd5b3805ec8da9d19081838f0ed0efc0071b51f10d1add5a6000000004945}
  x#{4e44ae426082}

# typedef ContentType Bar

> HMap Str (ContentType, Pin Bar)
= startingFiles
| hmSingleton
* largeConfig
* {/favicon.ico}
* [b#{image/x-icon} favicon]

# record CogState
| COG_STATE
* note       : Nat
* files      : (HMap Str (ContentType, Pin Bar))
* fileBytes  : Nat
* servThread : ThreadId

> ThreadId > CogState
= (newCogState servThread)
| COG_STATE
* b#{hello world}
* startingFiles
* 0
* servThread

(emptyFileServer req)=NONE

= (fileServer (PIN st) [method path query headers (PIN body)])
| trk [%fileServerRequest method path query headers body]
;@ originHeader | **fromSome b#{localhost}
;               | tabLookup b#{origin}
;               | tabFromPairs headers
;@ head | dynamicCors originHeader
# switch method
* _ | NONE
* GET
  | **fmapMaybe | hmLookup (barNat path) (**getFiles st)
  & [type (PIN content)]
  @ head | [(b#{Content-Type}, type)]
  [200 b#gotcha head content]

= (modifyState vSt fun return)
: (PIN old) < readRef vSt
@ srv       | **getServThread old
@ pNew      | PIN (fun old)
: _         < writeRef vSt pNew
: _         < cancelFork srv (syscall (**HTTP_SERV | fileServer pNew))
| return ()

(bindMaybe mVal k)=(maybeCase mVal NONE k)

> Bar > Maybe (Tab Str Json)
= (jsonMap jsonBS)
@ res@[json leftover] (parseJson jsonBS)
| if (res || leftover) NONE
# datacase json
* JMAP|m | SOME m
* _      | NONE

= (asJsonStr m)
# datacase m
* JSTR|s | SOME s
* _      | NONE

= (asJsonNum m)
# datacase m
* JNUM|n | SOME n
* _      | NONE

= (parseNote jsonBS)
@ res@[json leftover] (parseJson jsonBS)
| trk [%parseNote jsonBS]
: string < bindMaybe (asJsonStr json)
| SOME string

= (parseNoteJson jsonBS)
: map < bindMaybe (jsonMap jsonBS)
: theNote < bindMaybe (tabLookup %newNote map)
| SOME (barNat theNote)

(msgToStr m)=(JSTR | natBar m)

= (buildJson st)
@ COG_STATE(..) st
| JMAP
| trk [%note note]
## =note  | JVEC note
## =files | JVEC (map msgToStr (idx 0 (hmKeys files))) ; row-in-row for some reason
## =totalSize | JVEC (map fileBytes) ; this is structured wrong

= (handleReq vSt request return)
@ [rid method path headers pBody@(PIN body)] request
| trk [%handleReq request]
| trk [%handlePath path]
# switch method
* GET
  # switch path
  * b#{/note}
    : (PIN st) < readRef vSt
    @ noteJson   | buildJson st
    | trk [%st st]
    | trk [%json noteJson]
    @ noteJsonBS | printJson noteJson
    : _ < fork (syscall (**HTTP_ECHO rid 200 b#ok [] noteJsonBS))
    | return ()
  * _
    : _ < fork (syscall (**HTTP_ECHO rid 400 b#bad [] b#{}))
    | return ()
* POST
  # switch path
  * b#{/changed}
    : (PIN st) < readRef vSt
    @ noteState | getNote st
    | trk [%noteState noteState]
    | trk [%body body]
    @ noteNat | fromSome noteState | parseNoteJson body
    @ note | natBar noteNat
    | trk [%note note]
    : _ < modifyState vSt & st
                          | setNote | note
                          | st
    : _ < fork (syscall (**HTTP_ECHO rid 200 b#ok [] b#{}))
    | return ()
  * _
    : _ < fork (syscall (**HTTP_ECHO rid 400 b#bad [] b#{}))
    | return ()
* PUT
  : (PIN st) < readRef vSt
  @ barType | **fromSome b#{text/plain}
            | tabLookup b#{content-type}
            | tabFromPairs headers
  @ files (**getFiles st)
  @ files | hmInsert (barNat path) [barType pBody] files
  : _ < fork (syscall (**HTTP_ECHO rid 201 b#done [] b#{}))
  : _ < modifyState vSt & st
                        | setFiles files
                        | st
  | return ()
* OPTIONS
  : _ < fork (syscall (**HTTP_ECHO rid 200 b#ok [] b#{}))
  | return ()
* _
  | trk [%gotUnknown method]
  : _ < fork (syscall (**HTTP_ECHO rid 400 b#bad [] b#{}))
  | return ()


= (runHttpServer vSt return)
: ??(rhs_heard req) < syscall HTTP_HEAR
: _                 < handleReq vSt req
| runHttpServer vSt return

= (spinNotes return)
: servThread  < fork (syscall (**HTTP_SERV emptyFileServer))
: vSt         < newRef (PIN | newCogState servThread)
: httpThread1 < fork (runHttpServer vSt)
: httpThread2 < fork (runHttpServer vSt)
| return ()

main=(runCog spinNotes)
