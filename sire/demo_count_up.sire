; Copyright 2024 OPFN
; Use of this source code is governed by a BSD-style license that can be
; found in the LICENSE file.

; inline 'prelude' before 'demo_count_up'
#### demo_count_up <- prelude

; import 'prelude.sire'
:| prelude

;;; Count Up ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Bind a top-level named function
= (countLoop count k)
;
; Perform a system call for the current time
| syscall TIME_WHEN
& now
; The following code is a continuation passed to the above
;
; Print out the current count value
| trk [{counter is at} count]
;
; Wait until "now plus 1", discard return value
: _ < syscall (TIME_WAIT (inc now))
;
; Recurr, increasing the count by one
| countLoop (inc count) k

; Bind a top-level "main" function that will run our program
= (main)
; Call runCog to start a process with the countLoop "job"
| runCog (countLoop 0)
