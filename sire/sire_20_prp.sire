; Copyright 2023 The Plunder Authors
; Use of this source code is governed by a BSD-style license that can be
; found in the LICENSE file.

#### sire_20_prp <- sire_19_pat

;;;; Sire Properties
;;;; ===============
;;;;
;;;; Lookup and set properties on syntax objects.


;;; Imports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:| sire_01_fan
:| sire_02_bit
:| sire_03_nat
:| sire_05_row
:| sire_04_cmp
:| sire_05_row
:| sire_06_rex
:| sire_07_dat
:| sire_10_str
:| sire_11_set
:| sire_12_tab
:| sire_13_exp
:| sire_14_hax
:| sire_15_pad
:| sire_16_bar
:| sire_17_sug
:| sire_19_pat


;;; Functions for getting bindings and adding properties ;;;;;;;;;;;;;;;;;;;;;;;

;; TODO support inline annotations in = macro
= (getBind name ss rex err ok)
@ scope | idx 2 ss
@ binds | idx 4 ss
@ bind  | tabGet scope name
@ bRow  | pinItem bind
@ key   | idx 0 bRow
| ifz bind
    | err rex | strWeld {undefined symbol: } name
| if (not key)
    ; trk #[=bind]
    | err rex {bindKey is zero!!}
| **ok key bRow

= (getProps ss@[_ curMod _ modules _curProps] bind)
| if (isNat bind)
    | {not a binder} bind
@ [bindKey _ _ bindMod bindName] bind
; trk [getProps bindKey bindName bindMod]
| if (eql curMod bindMod)
    @ curProps  (idx 4 ss)
    @ bindProps (tabGet curProps bindKey)
    @ bindProps (ifz bindProps #[] bindProps)
    | bindProps
| else
    @ entry      (tabGet modules bindMod)
    @ theirProps (idx 1 | pinItem entry)
    @ bindProps  (tabGet theirProps bindKey)
    @ bindProps  (ifz bindProps #[] bindProps)
    | bindProps

= (addPropsToLocalBindingByKey ss bindKey extraProps)
@ curProps (get ss 4)
@ oldProps (tabGet curProps bindKey)
@ newProps (tabUnion extraProps oldProps)  ;  left-biased
@ curProps (tabPut curProps bindKey newProps)
@ ss       (put ss 4 curProps)
| ss

= (addProps ss bind extraProps)
@ [_ curMod _ modules curProps]  | ss
@ [bindKey _ _ bindMod bindName] | bind
| if (eql curMod bindMod)
    @ oldProps (tabGet curProps bindKey)
    @ newProps (tabUnion extraProps oldProps)  ;  left-biased
    @ curProps (tabPut curProps bindKey newProps)
    @ ss       (put ss 4 curProps)
    | ss
| else
    @ [modScope modProps] | pinItem | tabGet modules bindMod
    @ oldProps  (tabGet modProps bindKey)
    @ oldProps  (ifz oldProps #[] oldProps)
    @ newProps  (tabUnion extraProps oldProps)  ;  left-biased
    @ modProps  (tabPut modProps bindKey newProps)
    @ newModule [modScope modProps]
    @ modules   (tabPut modules bindMod | PIN [modScope modProps])
    @ ss        (put ss 3 modules)
    | ss

= (getProp ss bind propName)
@ props (getProps ss bind)
| tabGet props propName


;;; Convenience Macros to Query properties of bindings. ;;;;;;;;;;;;;;;;;;;;;;;;

= ({#getKey} ss rex err ok)
: _ symbol      < rexParseKids rex [readRex readSymbol] err
: bindKey _bind < getBind symbol ss rex err
| ok ss (cnsE bindKey)

= (readSymbDotProp rex err ret)
| if (neq {.} rexRune-rex)
  | err rex {Expected a . rune}
: symbol property < rexParseKids rex [readSymbol readSymbol] err
| ret [symbol property]

= ({#hasProp} ss rex err expand)
: _ [symbol property]
    < rexParseKids rex [readRex readSymbDotProp] err
: bindKey bind
    < getBind symbol ss rex err
@ props (getProps ss bind)
^ expand ss (cnsE _)
| tabHas property props

= ({#getProp} ss rex err expand)
: _ [symbol property] < rexParseKids rex [readRex readSymbDotProp] err
: bindKey bind        < getBind symbol ss rex err
^ expand ss (cnsE _)
| tabGet (getProps ss bind) property

= ({#setProp} ss rex err expand)
: _ [symbol property] valSym
    < rexParseKids rex [readRex readSymbDotProp readSymbol] err
: _ symBind < getBind symbol ss rex err
: _ valBind < getBind valSym ss rex err
^ expand _ '(#*)
| addProps ss symBind
| tabSing property (idx 1 valBind)

= (getPropsByKey ss key)
@ [_ _ _ modules props] ss
@ curProps (idx 4 ss)
| if (tabHas key curProps)
    | tabGet curProps key
| tabCatRow
: @(PIN [_ props]) < foreach (tabValsRow modules)
| ifNot (tabHas key props) #[]
| tabGet props key

= (getPropByKey ss key property)
@ props (getPropsByKey ss key)
| tabGet props property

why=3
whySrc=('(why=3))
setProp#(why.src)#whySrc
(1        =?= hasProp#(why.src))
('(why=3) =?= getProp#(why.src))
why=4
(0 =?= hasProp#(why.src))
(0 =?= getProp#(why.src))


;;; Exports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

^-^
^-^ {#getKey} {#hasProp} {#getProp} {#setProp}
^-^
^-^ getBind getProps getProp addProps
^-^ addPropsToLocalBindingByKey
^-^ getPropsByKey getPropByKey
^-^
