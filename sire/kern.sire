#### kern <- json

:| sire

= (EVAL f as)            [0 f as]
= (EXEC pump)            [1 pump]

= (DB_READ query)        [0 %read query]
= (DB_WRITE cmd)         [0 %write cmd]
= TIME_WHEN              [%time %when]
= (TIME_WAIT t)          [%time %wait t]
= (TCP_OPEN a p)         [%tcp %open a p]
= (TCP_GIVE h d)         [%tcp %give h d]
= TCP_HEAR               [%tcp %hear]
= (TCP_TAKE h)           [%tcp %take h]
= TCP_MINE               [%tcp %mine]
= (TCP_SHUT h)           [%tcp %shut h]

= (allocateSlot fr sl rq k)
| ifz fr
    @ key (len sl)
    @ sl  (rowSnoc sl 0)
    | k key fr sl rq
@ [key fr] | fr
| k key fr sl rq

= (getHandler key k end hl st rd ws)
@ handler | get hl key
| k handler end hl st rd ws

= (COG_DONE result end out hl st rd ws)
| end out hl st rd ws

= (COG_KERNEL out hl st rd ws inputs)
^ _ (listFromRow inputs) ~[] hl st rd ws
? (kernel_loop stream out hl st rd ws)
| ifz stream
  (COG_KERNEL ~[] hl st rd ws, listToRow out)
@ [[key [callback input]] stream] stream ; TODO extremely ugly to assume a callback
@ exe | get hl key
| ifz exe
  | kernel_loop stream out hl st rd ws   ; TODO Should maybe cancel the worker too?
@ (k result end out)
  @ out | CONS (key,callback,result) out
  | COG_DONE result end out
@ end | kernel_loop stream
| exe input k end out hl st rd ws

; ^ foldl _ COG_DONE inputs
; & (end (wid, input))
; ^ trk [%kernel_fold [=wid =input =end res=_]] _
; : k < getHandler wid
; | k input const-end

= (syscall request k end me fr sl rq)
@ rq | rowCons (me,request) rq
@ sl | put sl me k
| end fr sl rq

= (tag_syscall (dest,cmd,msg) k end me fr sl rq)
| syscall (dest,cmd,(me,msg)) k end me fr sl rq

= (PUMP_KERNEL fr sl rq key input)
@ exe | get sl key
@ sl  | put sl key 0
@ rq  | []                 ; TODO This should be solved in the runtime
| ifz exe | PUMP_KERNEL [key fr] sl rq
@ end | PUMP_KERNEL
@ me  | key
| exe input end me fr sl rq

= (PUMP_DONE _ end me fr sl rq)
| end [me fr] sl rq

= (pumpFork act k end me fr sl rq)
: tid fr sl rq < allocateSlot fr sl rq
| act PUMP_DONE (k tid end me) tid fr sl rq

= (void act k end me fr sl rq)
: tid fr sl rq < allocateSlot fr sl rq
| act () (k end me) tid [tid fr] sl rq

= (write x k end out hl st rd ws) | k () end out hl x      rd ws
= (state k end out hl st rd ws)   | k st end out hl st     rd ws
= (alter f k end out hl st rd ws) | k () end out hl (f st) rd ws

= (work req@[mode worker] handler k end out hl st rd ws)
@ w
  @ k   | PUMP_DONE
  @ end | PUMP_KERNEL
  @ me  | 0
  @ fr  | ~[]
  @ sl  | [0]
  @ rq  | []
  | ifz mode | req
  | [mode (worker k end me fr sl rq)]
@ ws | rowSnoc ws w
@ hl | rowSnoc hl handler
| k len-ws end out hl st rd ws

= (runCog st rd cog)
@ k   | COG_DONE
@ end | COG_KERNEL
@ hl  | []
@ ws  | []
@ out | ~[]
| cog k end out hl st rd ws
