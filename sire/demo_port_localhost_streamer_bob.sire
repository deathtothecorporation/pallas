; Copyright 2023 The Plunder Authors
; Use of this source code is governed by a BSD-style license that can be
; found in the LICENSE file.

#### demo_port_localhost_streamer_bob <- demo_port_localhost_streamer_ali

:| kern
:| prelude
:| demo_port_localhost

= usSeed
| idx-0-bob_seed_addr

= usAddr
| idx-1-bob_seed_addr

= themAddr
| idx-1-ali_seed_addr

= ourName
| {bob}

= whitelist
| setSing idx-1-ali_seed_addr

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Http design:
;
; Has one big HTTP server which just receives posts and gets. All GETs perform
; lookups in a cache of file for PUT.
;
; - PUT /file/<name> -> upload a file at a path

# record CogState
| COG_STATE
* files      : (Tab Bar (ContentType, Pin Bar))
* fileBytes  : Nat
* servThread : ThreadId
* srvrPort   : Maybe PortId
* srvrFiles  : (Set Bar)

> ThreadId > CogState
= (newState servThread)
| COG_STATE
* emptyTab
* 0
* servThread
* NONE
* emptySet

(emptyFileServer req)=NONE

;; stream a file from ali
;;
;; we use portMV to prevent concurrent uses of the port.
;;
;; communication protocol works as follows:
;; - filename is sent always
;; - optional start & end byte ranges are sent following the filename
;; - receive two barSer-ed bars: the content-type of the file, and the file
;;   itself. the file may either be the full file, or the byte range.
;;
;; TODO handle concurrency? if multiple requests happen in parallel, we want
;; a lock s.t. the Port w/ Ali can support a protocol coherently.
= (handleStreamFile vSt portMV rid path headers return)
: _ < takeMVar portMV
;
;; send to ali
@ byteRange
  | findIdx (x&(eql b#range (fst x))) headers []
  & rangeBarIdx
  ;; TODO handle parse errors
  @ rangeBar (snd (idx rangeBarIdx headers))
  | trk [{rangeBar:} rangeBar]
  @ bounds | listToRow (barSplitWith (x&(eql x {-})) (barDrop 6 rangeBar))
  | if (barIsEmpty (idx 1 bounds))
    | take 1 bounds
  | bounds
| trk [{byteRange:} byteRange]
@ bars | weld [path] byteRange
| trk [{bars:} bars]
@ payload (barCat (map barSer bars))
: (PIN st) < readRef vSt
| maybeCase (getSrvrPort st)
  : _ < fork (syscall (**HTTP_ECHO rid 500 b#{no portId} [] b#{}))
  : _ < putMVar portMV ()
  | return ()
& portId
: ??(p_send now) < syscall (**PORT_SEND portId payload)
| trk [ourName %sent payload {on port} portId %at now]
;
;; receive file choice bytes
: recvBars < recvFileBar portId
; trk [{recvBars len} (barLen recvBars) {, blake3 hash} (blake3 recvBars)]
@ bars | barDeserMultiRow recvBars
@ [fileContentType fileBar] | take 2 bars
; trk [{fileContentType:} fileContentType]
@ mbRangeDescr | if (eql 3 (len bars))
                  | SOME (idx 2 bars)
                | NONE
; trk [{mbRangeDescr:} mbRangeDescr]
@ rangeHead | maybeCase mbRangeDescr
              | []
            & rD
            | [(b#{Content-Range}, rD)]
@ head | weld [(b#{Content-Type}, fileContentType) (b#{Accept-Ranges}, b#{bytes}) (b#{Content-Length}, (barShowDecimal (barLen fileBar)))] rangeHead
: _ < fork (syscall (**HTTP_ECHO rid 206 b#partial head fileBar))
: _ < putMVar portMV ()
| return ()

= (fileServer (PIN st) [method path headers (PIN body)])
# switch method
* _ | NONE
* GET
  ;; `/file` path are handled dynamically, so we do not handle them here.
  | if (barIsPrefixOf b#{/file} path 0)
    | NONE
  | **fmapMaybe | tabLookup path (**getFiles st)
  & [type (PIN content)]
  @ head | [(b#{content-type}, type)]
  [200 b#gotcha head content]

; `modifyState` modifies the vSt ref and reboots the static server
; in-place (keeping the same ThreadId).
> Ref CogState
> (CogState > CogState)
> Cog ()
= (modifyState vSt fun return)
: (PIN old) < readRef vSt
@ srv       | **getServThread old
@ pNew      | PIN (fun old)
: _         < writeRef vSt pNew
: _         < cancelFork srv (syscall (**HTTP_SERV | fileServer pNew))
| return ()

> Ref CogState > HttpReq > Cog ()
= (handleReq vSt portMV request return)
@ [rid method path headers pBody@(PIN body)] request
# switch method
* PUT
  ; trk [{getting PUT at path} path]
  @ barType | **fromSome b#{text/plain}
            | tabLookup b#{content-type}
            | tabFromPairs headers
  : (PIN st) < readRef vSt
  @ newTotalSize | add (barLen body) | getFileBytes st
  ; trk [{body size:} (barLen body)]
  @ files (**getFiles st)
  @ files | tabIns path [barType pBody] files
  ; trk [%files (tabKeysList files)]
  : _ < fork (syscall (**HTTP_ECHO rid 201 b#done [] b#{}))
  : _ < modifyState vSt & st
                        | setFileBytes newTotalSize
                        | setFiles files
                        | st
  | return ()
* GET
  ; trk [{getting GET at path} path]
  | if (eql b#{/file} path)
    : (PIN st) < readRef vSt
    @ tks | setToRow (getSrvrFiles st)
    @ payload | printJson (JMAP (map JSTR tks))
    : _ < fork (syscall (**HTTP_ECHO rid 200 b#gotcha [] payload))
    | return ()
  | if (barIsPrefixOf b#{/file/} path 0)
    | handleStreamFile vSt portMV rid path headers return
  : _ < fork (syscall (**HTTP_ECHO rid 404 b#bad [] b#{}))
  | return ()
* _
  : _ < fork (syscall (**HTTP_ECHO rid 400 b#bad [] b#{}))
  | return ()

> Ref CogState > MVar () > Cog Void
= (runHttpServer vSt portMV return)
: ??(rhs_heard req) < syscall HTTP_HEAR
: _                 < handleReq vSt portMV req
| runHttpServer vSt portMV return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= (client vSt return)
@ portRqst [usAddr themAddr NONE (natBar 0)]
: ??(p_rqst clientPort) < syscall (**PORT_RQST usSeed portRqst)
@ [_cpThem _cpPayload cpMbPortId] | clientPort
| trk [ourName %got %clientPort clientPort]
| maybeCase cpMbPortId
  | trk {no client port, exiting}
  | return ()
& portId
: _ < modifyState vSt & st
                      | setSrvrPort (SOME portId)
                      | st
;
;; recv available files
: ??(p_recv [recvWhen (PIN recvBody)]) < syscall (**PORT_RECV portId)
| trk [ourName %recvd recvBody %at recvWhen]
@ bars | barDeserMultiRow recvBody
: _ < modifyState vSt & st
                      | setSrvrFiles (setFromRow bars)
                      | st
: (PIN st) < readRef vSt
| trk [{files: } (getSrvrFiles st)]
| return ()

> Cog ()
= (launchDemo return)
: servThread  < fork (syscall (**HTTP_SERV emptyFileServer))
: vSt         < newRef (PIN | newState servThread)
: _           < modifyState vSt id
: portMV      < newMVar ()
: httpThread1 < fork (runHttpServer vSt portMV)
;
| client vSt return

main=(runCog launchDemo)
