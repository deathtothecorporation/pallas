#### pinhash <- quickcheck

:| sire
:| blake3
:| quickcheck

> Nat > Nat > Bar
= (wordSing sz) | natToSizedBar (mul sz 8)

> Nat > (Bar, Bar)
= (doNat n)
| if isZero-n | wordSing 1 0
@ sz | inc | div (dec met-n) 64 ; what happens if something is bigger than 8 bytes?
| (wordSing 1 sz, wordSing sz n)

> Any > Bar
= (_PlanHash plan)
^ blake3 (_ plan)
? (go a)
| if isTab-a :: x#08
             :: (wordSing 1 tabLen-a)
             :: (listMap go tabKeysList-a)
             :: (listMap go tabValsList-a)
| if isSet-a | (x#07 :: wordSing 1 setLen-a :: map go setToRow-a)
| if isRow-a | (x#06 :: wordSing 1 len-a :: map go a)
| if isCow-a | (x#05 :: doNat cowSize-a)
| if isBar-a | (x#04 :: wordSing 1 barLen-a :: a)
| if isNat-a | (x#03 :: doNat a)
| if isApp-a ^ (x#02 :: _ 0 ~[] a)
             ? (loop n as a)
             | ifNot isApp-a (wordSing 1 n :: go a :: listMap go as)
             | loop (inc n) (cdr-a :: as) (car a)
| if isLaw-a | (x#01 :: doNat lawName-a :: doNat lawArgs-a :: go lawBody-a)
| if isPin-a | (x#00 :: _PlanHash pinItem-a)
| else       | die {impossible case in _PinHash}

= (_PinHash pin)
| ifNot isPin-pin 0
| _PlanHash pinItem-pin

= pinHash  | _PinHash
= planHash | _PlanHash

;;; Tests ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= (pinItemHash plan)
| eql | planHash plan
| pinHash PIN-plan

!! propJet planHash [1=3 5=2 7=8]
!! propJet planHash %[4 6 1 0 10]
!! propJet planHash [1 2 3 4 5 6]
!! propJet planHash c4
!! propJet planHash x#deadbeef
!! propJet planHash 42
!! propJet planHash (0 42)
!! propJet planHash pinItem-add
!! propJet planHash PIN-42

!! qc_jet 42 planHash arbPlan
!! qc_jet 42 pinHash arbPlan
!! qc1_pass 42 {pinHash equals inner planHash} prop1-pinItemHash arbPlan

;;; Exports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

^-^ planHash pinHash
