; Copyright 2023 The Plunder Authors
; Use of this source code is governed by a BSD-style license that can be
; found in the LICENSE file.

#### sire_25_datatype <- sire_24_rex

;;;; {#datatype} and {#datacase} work by setting some properties on the
;;;; binders for each constructor:  uses the properties conTag, conAri,
;;;; conFun, and conHas:
;;;;
;;;; -   conTag: The numerical tag for this branch.
;;;; -   conFun: The function used to get the tag from a instance.
;;;; -   conAri: The number of values on this branch.
;;;; -   conHas: Does this have a tag?  Should we offset our values
;;;;             indecies by one when getting fields?
;;;; -   conRaw: Field *is* the value, no fetching.
;;;;
;;;; This design is at "get something running" levels of polish, and
;;;; will eventually need to be completely ripped apart, redesigned,
;;;; and rebuilt.
;;;;
;;;; Furthermore, the code generated by {#datacase} is currently
;;;; quite inferior to the code generated the utility functions
;;;; `maybeCase`, `listCase`, etc.  #datacase  currently outputs a
;;;; switch call in all cases.  Still unclear how best to resolve this
;;;; issues.
;;;;
;;;; TODO: {#datacase} should accept any three kids, the cases shouldn't
;;;; be required to be an heir.
;;;;
;;;; TODO: {#datacase} should support {**annotation} on constructers to
;;;; indicate that every constructor should be created as an
;;;; "always-inline" law.
;;;;
;;;; TODO: {#datacase} should optimize the single-branch case to an if.


;;; Imports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:| sire_01_fan
:| sire_02_bit
:| sire_03_nat
:| sire_05_row
:| sire_04_cmp
:| sire_05_row
:| sire_06_rex
:| sire_07_dat
:| sire_10_str
:| sire_11_set
:| sire_12_tab
:| sire_13_exp
:| sire_14_hax
:| sire_15_pad
:| sire_16_bar
:| sire_17_sug
:| sire_18_pat
:| sire_19_bst
:| sire_20_prp
:| sire_21_switch
:| sire_22_seed


;;; Opening Records ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= (constrToCamel prefix constr)
| strWeld prefix
| strFromList
^ _ ({_} :: strToList (strToLower constr))
? (fixUnderscores str)
: c cs < listCase str str
: d ds < listCase cs  str
| if (c /= {_}) (c :: fixUnderscores cs)
| fixUnderscores (toUpper d :: ds)

=?= {mkTreeConfig} | constrToCamel %mk {TREE_CONFIG}

= (defC sig bodyExp)
| OPEN {#=} (sigE sig, bodyExp) 0

= (defKC key sig bodyExp)
| OPEN {#=} (natE key, sigE sig, bodyExp) 0

= (defKPC key props sig bodyExp)
| OPEN {#=} (natE key, cnsE props, sigE sig, bodyExp) 0

> (Nat, Str) > Cmd
= (mkGetterC pair)
@ ix,field | pair
@ nam      | strWeld {get} (strCapitalize field)
| defC (nam, {x})
| appE (cnsE (idx ix), varE {x})

> (Nat, Str) > Cmd
= (mkSetterC pair)
@ ix,field | pair
@ nam      | strWeld {set} (strCapitalize field)
| defC [nam {x} {record}]
| appE (cnsE (mut ix), varE {x}, varE {record})

> (Nat, Str) > Cmd
= (mkModderC pair)
@ ix,field | pair
@ nam      | strWeld {mod} (strCapitalize field)
| defC [nam {fun} {record}]
| appE
++ cnsE (mut ix)
++ appE (varE {fun}, appE (cnsE (idx ix), varE {record}))
++ varE {record}

= (mkConstrKC key constr fields)
| defKC key (rowCons constr fields)
| rowE (map varE fields)

= (mkConstrKPC key props constr fields)
| defKPC key props (rowCons constr fields)
| rowE (map varE fields)


;; This example:
;;
;;     record#(Pair a b)#(PAIR fst:a snd:b)
;;
;; Expands to:
;;
;;     = (PAIR fst snd) | [fst snd]
;;     = (getFst x)     | idx 0 x
;;     = (getSnd x)     | idx 1 x
;;     = (setFst v x)   | mut 0 v x
;;     = (setSnd v x)   | mut 1 v x
;;
;; This input format works too:
;;
;;     # record (Pair a b)
;;     | PAIR fst:a snd:b
;;
;; And also this:
;;
;;     # record (Pair a b)
;;     | PAIR
;;     * fst : a
;;     * snd : b

= sigExpect   } Expected `x` or signature `(x y z)`
= fieldExpect } Expected something like (field:type)

= (parseField rex err ret)
@ sKids (rexKids rex)
@ sRune (rexRune rex)
| ifNot ({:} == sRune)   | err rex fieldExpect
| ifNot (2 == len-sKids) | err rex fieldExpect
: sym < readSymbol (idx 0 sKids) err
@ typ (idx 1 sKids)
; Ignoring the type for now.
| ret (0, sym, typ)

= (parseManyFields rexes err ret)
^ rowTraverse _ rexes ret
& (rex ret)
| parseField rex err ret

= fieldItemExpect
} * field : type
} * field : type

= (parseItemizedFields rex err ret)
^ _ NIL rex
? (go acc rex)
| ifz rex
    | ret (listToRowRev acc)
| ifNot (rexRune rex == {*})
    | err rex fieldItemExpect
@ sons    (rexSons rex)
@ numSons (len sons)
| if (numSons == 1)
    : field < parseField (idx 0 sons) err
    | go (field :: acc) (rexHeir rex)
| ifNot (numSons == 2)
    | err rex fieldItemExpect
: sym   < readSymbol (idx 0 sons) err
@ typ   | idx 1 sons
@ field | (0, sym, typ)
| go (field :: acc) (rexHeir rex)

> Rex > Parser (Nat, Symbol, Maybe Nat)
= (readSymbolMaybeWithTag rex err ok)
| ifNot (rexIsNode rex)
    : sym < readSymbol rex err
    | ok (0, sym, NONE)
;
@ kids@[symRex tagRex] (rexKids rex)
;
| if ((rexRune rex /= {=}) || (len kids /= 2))
    | err rex {Expecting CONSTR or CONSTR=tag}
;
: sym < readSymbol symRex err
: tag < readKey tagRex err
| ok (0, sym, SOME tag)

;; {readConstructorSig} accepts inputs that look like one of the
;; following:
;;
;;     CNSTR
;;     (CNSTR (field:type)*)
;;     (CNSTR (* field : type)(* field : type)
;;     (|CNSTR)(* field : type)(* field : type)
;;
;;     CNSTR={tag}
;;     (CNSTR={tag} (field:type)*)
;;     (CNSTR={tag} (* field : type)(* field : type)
;;     (|CNSTR={tag})(* field : type)(* field : type)

> Rex > Parser (Nat, Symbol, Maybe Nat, Row Symbol)
= (readConstructorSig r err ok)
;
| ifNot (rexIsNode r)
    : cnstr < readSymbol r err
    | ok (0, cnstr, NONE, [])
;
@ rune | rexRune r
;
| if (rune == {=})
    : (_, cnstr, oTag) < readSymbolMaybeWithTag r err
    | ok (0, cnstr, oTag, [])
;
@ kids@[cnstrRex] | rexKids r
@ numKids         | len kids
;
| if ((rune /= {|}) || isZero numKids)
    | err r sigExpect
;
: (_, cnstr, oTag)
    < readSymbolMaybeWithTag cnstrRex err
;
| if (eql 1 numKids)
    | ok (0, cnstr, oTag, [])
;
@ fields     | drop 1 kids
@ firstField | idx 0 fields
;
| if (eql 2 numKids && ({*} == rexRune firstField))
    : fields < parseItemizedFields (idx 1 kids) err
    | ok (0, cnstr, oTag, fields)
: fields < parseManyFields (drop 1 kids) err
| ok (0, cnstr, oTag, fields)

;; {readDatatypeSig} uses an inglorious short-term hack: it simply runs
;; the record-signature parser against a fudged input.

> Rex > Parser (Nat, Symbol, Maybe Nat, Row Symbol)
= (readDatatypeSig node err ok)
@ rune (rexRune node)
| if (neq {*} rune)
    | err node {Expecting something like (* CNSTR field:type ...)}
^ readConstructorSig _ err ok
| rexSetRune {|} node

= (rexToTrip rex)
@ bad
    | die [%rexToTrip %badArgument rex]
: rune sons heir
    < **rexGetNode rex bad
| if (neq 0 heir)
    | bad
| rowCons rune sons

; {#record}/Macro
= ({#record} ss rex err ok)
@ kids    (rexKids rex)
@ numKids (len kids)
;
; We ignore the first kid, because it's the type, which we don't yet
; actually do anything with.
;
@ sigRex (idx 2 kids)
: [key constr oTag fields]
    < readConstructorSig (idx 2 kids) err
;
| if (oTag /= NONE)
    | err sigRex {Record constructors are never tagged}
;
: ss constrKey < generateUniqueKey ss
;
@ fields  | map snd fields  ;;  (Row (RexId, Symbol, Type)) -> Row Symbol
@ props   | bt [[%fieldNames fields]]
;
| ok ss
| if (null fields)
    | defKPC constrKey props [constr] (cnsE 0)
| bloodline
| listCat
~~ listSing (mkConstrKPC constrKey props constr fields)
~~ listMap mkGetterC (listIndexed | listFromRow fields)
~~ listMap mkSetterC (listIndexed | listFromRow fields)
~~ listMap mkModderC (listIndexed | listFromRow fields)

record#Unit#UNIT
record#(Box a)#(BOX boxItem:a)

# record (Pair a b)
| PAIR fst:a snd:b

ex=(PAIR %a %b)

=?= (getFst ex)    | %a
=?= (getSnd ex)    | %b
=?= (setFst %x ex) | PAIR %x %b
=?= (setSnd %x ex) | PAIR %a %x
=?= (modFst inc ex) | PAIR %b %b
=?= (modSnd inc ex) | PAIR %a %c

;;; Datatypes ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;
;;; # datatype (Either a b)
;;; * LEFT x:a
;;; * RYTE x:b
;;;
;;; # datatype (List a)
;;; * NULL
;;; * CONS x:a xs:(List a)
;;;


;;; readDataBranches ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; TODO: Validate that all tags are implicit or
; explicit and that all explicit tags are unique.

> Rex > Parser (Row (Nat, Symbol, Maybe Nat, Row Symbol))
= (readDataBranches r err ok)
^ _ ~[] r
? (go acc r)
@ this | rexSetHeir 0 r
@ that | rexHeir r
: sig < readDatatypeSig this err
@ !acc sig::acc
| ifz that
    | ok (listToRowRev acc)
| else
    | go acc that


=?=  ++ [0 %FOO NONE [(0, {x}, 'a)]]
     ++ [0 %BAR NONE [(0, {x}, 'b) (0, {y}, 'c) (0, {z}, 'd)]]
     ++ [0 %LOL NONE []]
  ^ readDataBranches _ v2 id
  ' * FOO x:a
    * BAR x:b y:c z:d
    * LOL

=?=  ++ [0 %FOO (SOME %f) [(0, {x}, 'a)]]
     ++ [0 %BAR (SOME %b) [(0, {x}, 'b) (0, {y}, 'c) (0, {z}, 'd)]]
     ++ [0 %LOL (SOME %l) []]
  ^ readDataBranches _ v2 id
  ' * FOO=f x:a
    * BAR=b x:b y:c z:d
    * LOL=l


= (assignKeysToBranches ss branches ok)
^ rowTraverseState ss _ branches ok
& (ss [_ cns oTag arg] ok)
: ss nex < generateUniqueKey ss
| ok ss [nex cns oTag arg]


;;; defDataTypeC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

> Row (Key, Str, Maybe Nat, Row Str)
> (RexProps, Cmd)
= (defDataTypeC branches)
;
; ^ trk [defDataTypeC=_] _
;
^ _ 0 NIL (listFromRow branches)
? (loop ix acc remain)
;
| seq ix
; trk {loop},[=ix =acc =remain]
;
: kca remain < listCase remain (bloodline acc)
@ [key cns oTag arg] kca
;
@ ari | len arg
@ tag | fromSome ix oTag
@ prp | bt [{conTag},tag {conAri},ari {conFun},_DataTag {conHas},1 {conRaw},0]
;
| ifz ari
    @ bod | natE tag
    @ cmd | defKPC key prp [cns] bod
    | loop (inc ix) (cmd :: acc) remain
| else
    @ arg (map idx-1 arg)
    @ bod (| rowE | rowCons natE-tag | map varE arg)
    @ cmd (defKPC key prp (rowCons cns arg) bod)
    @ acc (CONS cmd acc)
    | loop (inc ix) acc remain


;;; #datatype ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= datatypeExpected
} Expected something like
}
}     # datatype Type
}     * CONSTR
}     * CONSTR field:type ...

> Macro
= ({#datatype} ss rex err ok)
@ kids (rexKids rex)
| if (len kids /= 3)
    | err rex datatypeExpected
: branches    < readDataBranches (idx 2 kids) err
: ss branches < assignKeysToBranches ss branches
| ok ss (defDataTypeC branches)

# datatype (Either a b)
* E_LEFT x:a
* E_RIGHT x:b

=?= 0        | getProp#(E_LEFT.conTag)
=?= 1        | getProp#(E_LEFT.conAri)
=?= _DataTag | getProp#(E_LEFT.conFun)
=?= 1        | getProp#(E_RIGHT.conTag)
=?= 1        | getProp#(E_RIGHT.conAri)
=?= _DataTag | getProp#(E_RIGHT.conFun)

!! eql [0 9] | E_LEFT 9
!! eql [1 8] | E_RIGHT 8

# datatype (Choice a b)
* THIS=l x:a
* THAT=r x:b

=?= {l}      | getProp#(THIS.conTag)
=?= 1        | getProp#(THIS.conAri)
=?= _DataTag | getProp#(THIS.conFun)
=?= {r}      | getProp#(THAT.conTag)
=?= 1        | getProp#(THAT.conAri)
=?= _DataTag | getProp#(THAT.conFun)

!! eql [%l 9] | THIS 9
!! eql [%r 8] | THAT 8


;;; parseDatacase ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

> (Rex -> Parser e)
> Rex
> Parser2 (Maybe e) (Row (Rex, Symb, Row Pat, e))
= (parseDatacaseBody readExp cases err ok)
;;;;;
: clauses
    < ^ unrollSlip2Tar cases _ err
      ? (onAlien x err ret)
      | err x {Not a switch branch}
;
^ _ NONE ~[] (listFromRow clauses)
? (go oFallback acc remain)
;
: [sigRex bodyRex] remain
    < listCase remain
        | ok oFallback (listToRowRev acc)
;
: bodyExp < readExp bodyRex err
;
| if (eql '_ sigRex)
    | ifNonZero oFallback
        | err cases {Only one fallback-pattern is allowed}
    | go (SOME bodyExp) acc remain
;
: constr fields
    < & k
      | if (rexIsLeaf sigRex)
          : sym < readKey sigRex err
          | k sym []
      | else
          : c m fs < readDestroyer sigRex err
          | if m   | err sigRex {Inline annotation in datacase is nonsense}
          | k c fs
;
@ acc [sigRex constr fields bodyExp]::acc
| go oFallback acc remain

> (Rex -> Parser e)
> Rex
> Parser3 e (Maybe e) Row-(Rex, Symb, Row Pat, e)
= (parseDatacase readExp rex err ok)
@ sons@[_ valExp] | rexSons rex
@ heir            | rexHeir rex
;
| if (isZero heir || (len sons /= 2))
    | err rex {#datacase requires one son plus an heir.}
;
: exp      < readExp valExp err
: fb cases < parseDatacaseBody readExp heir err
| ok exp fb cases


;;; readDatacaseBody ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# record (DataCase p e)
| DATA_CASE
* tag    : Nat
* arity  : Nat
* fields : Row p
* body   : e
* isRaw  : Bit

= (resolveDatacase rex ss oFallback branches err ok)
@ fallback (fromSome (cnsE 0) oFallback)
;
^ _ FALSE 0 NIL (listFromRow branches)
? (go hasTag fun acc remain)
;
: hed@[sigRex constr fields bodyRex] remain
    < listCase remain
        | ok hasTag fun fallback (listToRowRev acc)
;
: bindKey _pin bindRow < getBind constr ss rex err
@ props (getProps bindRow)
;
; trk #[=bindKey =bindRow =props =constr]
;
| ifNot (btHas {conTag} props)
    | trk [=bindKey =bindRow =props]
    ^ err sigRex (strWeld _ constr)
    | {Unknown constructor(tag): }
;
| ifNot (btHas {conAri} props)
    ^ err sigRex (strWeld _ constr)
    | {Unknown constructor(ari): }
;
| ifNot (btHas {conFun} props)
    ^ err sigRex (strWeld _ constr)
    | {Unknown constructor(fun): }
;
| ifNot (btHas {conHas} props)
    ^ err sigRex (strWeld _ constr)
    | {Unknown constructor(has): }
;
| ifNot (btHas {conRaw} props)
    ^ err sigRex (strWeld _ constr)
    | {Unknown constructor(raw): }
;
@ tag    | btGet props {conTag}
@ ari    | btGet props {conAri}
@ fun    | btGet props {conFun}
@ hasTag | btGet props {conHas}
@ isRaw  | btGet props {conRaw}
;
| if (len fields /= ari)
    ^ err sigRex (strWeld _ | showNat ari)
    | {This constructor requires arity=}
;
@ acc (DATA_CASE tag ari fields bodyRex isRaw)::acc
| go hasTag fun acc remain


> SireState
> Rex
> Parser4 Bit (a -> Nat) Rex (Row | DataCase Rex Rex)
;
= (readDatacaseBody ss casesRex err ok)
: oFallback branches  < parseDatacaseBody readRex casesRex err
: hasTag fun fb cases < resolveDatacase casesRex ss oFallback branches err
| ok hasTag fun fb cases

= nullProps
    | bt
   ++ [%conTag 0]
   ++ [%conAri 0]
   ++ [%conFun _DataTag]
   ++ [%conHas TRUE]
   ++ [%conRaw FALSE]
= consProps
    | bt
   ++ [%conTag 1]
   ++ [%conAri 2]
   ++ [%conFun _DataTag]
   ++ [%conHas TRUE]
   ++ [%conRaw FALSE]

=?=  ++ TRUE
     ++ dataTag
     ++ cnsE 0
     ++  ++ [0 0 []                  '[x {]}]         FALSE]
         ++ [1 2 [[%v {_}] [%v {_}]] '[x { } (go xs)] FALSE]
  ^ _ v2 v4
  @ xpr ' * LNULL       [x {]}]
          * (LCONS _ _) [x { } (go xs)]
  @ scope ## =LNULL (PIN [3 0 0 0 0 nullProps])
          ## =LCONS (PIN [4 0 0 0 0 consProps])
  | readDatacaseBody [0 0 scope 0 #[]] xpr

=?=  ++ TRUE
     ++ dataTag
     ++ '[x { } (go xs)]
     ++  ++ [0 0 [] '[x {]}] FALSE]
  ^ _ v2 v4
  @ xpr ' * LNULL [x {]}]
          * _     [x { } (go xs)]
  @ scope ## =LNULL | PIN [3 0 0 0 0 nullProps]
          ## =LCONS | PIN [4 0 0 0 0 consProps]
  | readDatacaseBody [0 0 scope 0 #[]] xpr

= xpr ' * _ 0
        * _ 0

=?=  ++ xpr
     ++ {Only one fallback-pattern is allowed}
  | readDatacaseBody 0 xpr v2 v4


;;; makeDatacaseExpr ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= (makeDatacaseExpr hasTag fun ss valExp fallback cases return)
: ss tmpExp < generateVarE {g} ss
: ss pairs
    < ^ rowTraverseState ss _ cases
      & (ss [tag ari params body isRaw] continue)
      @ rowPat
          | if isRaw
              | if (len params /= 1)
                  | die {raw datatype with fields != 1??  Nonsense.}
              | idx 0 params
          | if hasTag
          * (%r, rowCons [%v {_}] params)
          * (%r, params)
      @ binds [(rowPat, valExp)]
      @ [ss bSeq deps] (sequenceBinds ss binds)
      | continue ss (tag, bindSeqE bSeq body deps)
@ tagExp (appE (cnsE fun, tmpExp))
@ result
    | OPEN {#@} [tmpExp valExp]
    | switchE tagExp fallback
    | tabFromPairs
    | pairs
| return ss result


;;; #datacase ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= ({#datacase} ss rex err ok)
;;;
@ sons | rexSons rex
@ heir | rexHeir rex
;;;
| if (neq 2 (len sons))
    | err rex {#datacase requires one son plus an heir.}
| ifz heir
    | err rex {#datacase requires one son plus an heir.}
;;;
@ [_ valExp] sons
: hasTag fun fb cases < readDatacaseBody ss heir err
: ss exp              < makeDatacaseExpr hasTag fun ss valExp fb cases
| ok ss exp

# datatype (List a)
* LNULL
* LCONS x:a y:(List a)

= (showList xs)
| strWeld {[}
^ _ xs
? (go xs)
# datacase xs
* LNULL
    | {]}
* (LCONS x xs)
    | strCat
    # datacase xs
    * LNULL       [x {]}]
    * (LCONS _ _) [x { } (go xs)]

=?= {[a b c]}
        | showList | LCONS %a | LCONS %b | LCONS %c LNULL

=?= {hi} # datacase (LCONS 3 4)
         * LNULL {bye}
         * _     {hi}

=?= {hi} # datacase (LCONS 3 4)
         * LNULL {byte}
         * _
         | {hi}

; TODO
; =?= {hi} # datacase (LCONS 3 4)
;          * LNULL {bye}
;          | {hi}


;;; Dynamic Typing ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

pinTag=0
lawTag=1
appTag=2
natTag=3
barTag=4
rowTag=5
tabTag=6
cowTag=7
setTag=8

= (_TypeTag x)
| if isBar-x barTag ;BAR
| if isRow-x rowTag ;ROW
| if isTab-x tabTag ;TAB
| if isCow-x cowTag ;COW
| if isSet-x setTag ;SET
| planTag x

typeTag=(_TypeTag)


;;; Backfills ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Bit ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= falseProps | bt [{conAri},0 {conFun},id {conHas},0 {conRaw},0  {conTag},0]
= trueProps  | bt [{conTag},1 {conAri},0  {conRaw},0 {conFun},id {conHas},0]

(0 #= falseProps #= FALSE #= FALSE)
(0 #= trueProps  #= TRUE  #= TRUE)

=?= {true}
  # datacase TRUE
  * TRUE  {true}
  * FALSE {false}


;;; Maybe ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= noneProps | bt [{conTag},0 {conAri},0 {conFun},len {conHas},0 {conRaw},0]
= someProps | bt [{conTag},1 {conAri},1 {conFun},len {conHas},0 {conRaw},0]

(0 #= someProps #= SOME #= SOME)
(0 #= noneProps #= NONE #= NONE)

=?= [{some} %x]
  # datacase (SOME %x)
  * NONE     | {none}
  * (SOME x) | [{some} x]


;;; List ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= consProps | bt [{conTag},2 {conAri},2 {conFun},len {conHas},0 {conRaw},0]
= nilProps  | bt [{conTag},0 {conAri},0 {conFun},len {conHas},0 {conRaw},0]

(0 #= consProps #= CONS #= CONS)
(0 #= nilProps  #= NIL  #= NIL)

=?= {xyz abcd}
  ^ _ ~[{x} {y} {z } {abcd}]
  ? (strCatList lis)
  # datacase lis
  * NIL         | {}
  * (CONS x xs) | strWeld x (strCatList xs)


;;; Either ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= leftProps  | bt [{conTag},0 {conAri},1 {conFun},(idx 0) {conHas},1 {conRaw},0]
= rightProps | bt [{conTag},1 {conAri},1 {conFun},(idx 0) {conHas},1 {conRaw},0]

(0 #= leftProps  #= LEFT  #= LEFT)
(0 #= rightProps #= RIGHT #= RIGHT)

= (showEither eat)
# datacase eat
* (LEFT x)  [{left} x]
* (RIGHT x) [{right} x]

=?= [%left  %x] | showEither | LEFT  | {x}
=?= [%right %y] | showEither | RIGHT | {y}


;;; Exports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

^-^
^-^ defC defKC defKPC ;; TODO Move this elsewhere
^-^
^-^ typeTag
^-^ pinTag lawTag appTag natTag barTag rowTag tabTag cowTag setTag
^-^
^-^ parseDatacase resolveDatacase makeDatacaseExpr
^-^
^-^ {#datacase}
^-^ {#datatype}
^-^ {#record}
^-^
^-^ ; Re-export re-bindings of these values with meta-data about how to
^-^ ; pattern match on them.
^-^ TRUE FALSE
^-^ LEFT RIGHT
^-^ SOME NONE
^-^ CONS NIL
^-^
