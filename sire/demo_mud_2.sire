#### demo_mud_2 <- prelude

; stack run plunder save mud.seed sire/demo_mud_2.sire
; stack run plunder repl mud.seed

:| sire

;172;
;345;
;060;

; TODO / IDEAS
; - generate stuff in rooms from random tables
;   - then add AI...

= grid
, [1 7 2]
  [3 4 5]
  [0 6 0]

;= r [1  0 0 3 0]
;;    id n e s w
; TODO: change to a Tab (exits, items, description, creatures, etc)
= rooms
, [1 0 7 3 0 [b#{a rusty dagger} b#{3 coins}]]     ;1
  [2 0 0 5 7 [b#{a human skull made of tin foil}]] ;2
  [3 1 4 0 0 [b#{footprints...} b#{detritus}]]
  [4 7 5 6 3 [b#{many pinholes in the  walls} b#{tiny worms writhing on the ground}]]
  [5 2 0 0 4 []]
  [6 4 0 0 0 [b#{yourself, standing on the ceiling}]]
  [7 0 2 4 1 [b#{a wide open space}]] ; 7

; TODO: add room description
= rooms
| tabFromPairs
++  , 1
    | tabFromPairs
    , [b#exits [0 7 3 0]]
++  , 2
    | tabFromPairs
    , [b#exits [0 0 5 7]]
++  , 3
    | tabFromPairs
    , [b#exits [1 4 0 0]]
++  , 4
    | tabFromPairs
    , [b#exits [7 5 6 3]]
++  , 5
    | tabFromPairs
    , [b#exits [2 0 0 4]]
++  , 6
    | tabFromPairs
    , [b#exits [4 0 0 0]]
++  , 7
    | tabFromPairs
    , [b#exits [0 2 4 1]]

= (maxRow x)
| foldl max (idx 0 x) x

= items
| tabFromPairs
++  , 1
    | tabFromPairs
    ,  [b#look b#{a rusty dagger}]
       [b#desc b#{it looks dull}]
++  , 2
    | tabFromPairs
    , [b#look (# b {a cheeseburger})]
      [b#desc (# b {it has a bite taken out of it})]
++  , 3
    | tabFromPairs
    , [b#look b#{a large stone}]
      [b#desc b#{there is some lichen on one side}]
++  , 4
    | tabFromPairs
    , [b#look (# b {a ruby})]
      [b#desc (# b {shiny})]
++  , 5
    | tabFromPairs
    , [b#look (# b {the thing you've been looking for})]
      [b#desc (# b {its not quite what you expected})]

= itemLocations
| tabFromPairs
++  , 1
    | tabFromPairs
    , [b#roomId 1]
      [b#playerId 0]
++  , 2
    | tabFromPairs
    , [b#roomId 2]
      [b#playerId 0]
++  , 3
    | tabFromPairs
    , [b#roomId 2]
      [b#playerId 0]
++  , 4
    | tabFromPairs
    , [b#roomId 3]
      [b#playerId 0]
++  , 5
    | tabFromPairs
    , [b#roomId 6]
      [b#playerId 0]

; TODO: allow for defining rooms, items, etc. all state in a separate file
;       that gets ingested here.

; generateInitialState
= (gis)
@ stats | tabFromPairs
        , [b#hp 10]
          [b#todo 100]
| tabFromPairs
, [b#rooms rooms]
  [b#roomT rooms]
  [b#grid grid]
  [b#items items]
  [b#currentPosition 1]
  [b#inventory []]
  [b#stats stats]
  [b#itemLocations itemLocations]

; TODO: Probably use Sets to do these "diffs" nicely
= (up change oldState)
@ key | (idx 0 change)
@ val | (idx 1 change)
| trk [%key key %val val]
# switch key
* b#playerMove
  @ chgd | tabIns b#currentPosition val oldState
  | trk [%chngddddd chgd]
  chgd
* _
  oldState

= (stateGet key state)
| tabGet state key

= (roomGet id state)
| tabGet (stateGet b#rooms state) id

= (exitsGet roomId state)
| tabGet (roomGet roomId state) b#exits

= (itemGet id state)
| tabGet (stateGet b#items state) id

= (curPos state)
| stateGet b#currentPosition state

= (curRoom state)
| tabGet (stateGet b#roomT state) (curPos state)

= (itemLocationSetPlayer itemId playerId state)
@ oldLocs | stateGet b#itemLocations state
| trk [%oldLocs oldLocs]
; @ oldItemLoc | tabGet oldLocs itemId
@ newItemLoc | tabFromPairs [[b#roomId 0] [b#playerId playerId]]
| trk [%newItemLoc newItemLoc]
@ newLocs | tabIns itemId newItemLoc oldLocs
| trk [%newLocs newLocs]
@ newState | tabIns b#itemLocations newLocs state
| trk [%newState newState]
newState

;= (itemLocationSetRoom itemId roomId state)
;0

= (flatten rows)
@ head (fromSome listHead rows)
@ tail (slice rows 1 (len rows))
| ifNot (len tail)
  head
| weld head (flatten tail)

= (flatGrid)
| flatten grid

; ++ [1 [0 0 3 0]]
; ++ [2 [0 2 4 0]]
; ++ [3 [0 0 5 0]]
; ++ [4 [1 4 0 0]]
; ++ [5 [0 5 6 3]]
; ++ [6 [4 0 0 0]]

= (dirIndex dir)
| if (eql dir b{n}) | 0
| if (eql dir b{e}) | 1
| if (eql dir b{s}) | 2
| if (eql dir b{w}) | 3
0

; returns room id
= (go dir state)
| if (eql (curRoom state) 0)
  | trk [%whereAreYou]
  0
@ nextRoom | get (tabGet (curRoom state) b#exits) (dirIndex dir)
| trk [%next nextRoom]
# switch nextRoom
* 0
  | curPos state
* _
  nextRoom

; = (me tile currentPosition)
; | if (eql tile currentPosition)
;   b#{@}
; | natBar | showNat tile

= (printEntrance eRow)
  # switch (map (neq 0) eRow)
  * [1 1 1 1]
    b#{┼}
  * [0 1 1 1]
    b#{┬}
  * [1 1 0 1]
    b#{┴}
  * [1 1 1 0]
    b{├}
  * [1 0 1 1]
    b{┤}
  * [1 0 1 0]
    b{│}
  * [0 1 0 1]
    b{─}
  * [0 1 1 0]
    b{┌}
  * [0 0 1 1]
    b{┐}
  * [1 1 0 0]
    b{└}
  * [1 0 0 1]
    b{┘}
  * [1 0 0 0]
    b{╵}
  * [0 0 1 0]
    b{╷}
  * [0 0 0 1]
    b{╴}
  * [0 1 0 0]
    b{╶}
  b#{.}

= (printARoom state roomId)
@ entrances | (tabGet (roomGet roomId state) b#exits)
| if (eql (curPos state) roomId)
  b#{@}
| if (len entrances)
  | printEntrance entrances
b#{#}

= (print state message)
@ top | barCat | map (roomId & printARoom state roomId) (slice flatGrid 0 3)
@ mid | barCat | map (roomId & printARoom state roomId) (slice flatGrid 3 6)
@ bot | barCat | map (roomId & printARoom state roomId) (slice flatGrid 6 9)
| barUnlines | intersperse barNewline [top mid bot "" message "" b#{> }]

=?= (dirIndex b{n})
  | 0

=?= (dirIndex b{e})
  | 1

=?= (dirIndex b{s})
  | 2

=?= (dirIndex b{w})
  | 3

=?= (dirIndex b{wut})
  | 0

=?= (curPos gis)
  | 1

=?= 6
  @ s | tabIns b#currentPosition 4 gis
  | go b{s} s

=?= 5
  @ s | tabIns b#currentPosition 4 gis
  | go b{e} s

=?= 3
  @ s | tabIns b#currentPosition 4 gis
  | go b{w} s

=?= 1
  @ s | tabIns b#currentPosition 1 gis
  | go b{n} s

; TODO: this means going "x" actually goes north, because of dirIndex 0
=?= 7
  @ s | tabIns b#currentPosition 4 gis
  | go b{x} s

; you're nowhere, can't go anywhere.
=?= 0
  @ s | tabIns b#currentPosition 9 gis
  | go b{n} s

= (message newState oldState dir)
| if (eql (tabGet newState b#currentPosition) (tabGet oldState b#currentPosition))
  b#ouch
| barCat [b#{moved } dir]

= (invalid state)
[state b#{invalid command (n e s w l {get <id>})}]

= (filterByRoomId roomId pair)
; pair == [roomId roomTab]
@ roomIdInPair | tabGet (idx 1 pair) b#roomId
| if (eql roomId roomIdInPair)
  (idx 0 pair)
0

= (getItemIds roomId state)
| filter neq-0
| map (filterByRoomId roomId)
| tabToPairs
| stateGet b#itemLocations state

= (filterItems itemIds state)
| tabFromPairs
| map (x & [x (tabGet (stateGet b#items state) x)]) itemIds

; TODO: add general purpose "get all x val in map" function
> Tab > Row
= (tabGetValsOfKey t key)
| listToRow
| listMap (x & (tabGet x key)) (tabValsList t)

; only get the 'look' of each item in an item map
> Tab > Row
= (itemLooks items)
| tabGetValsOfKey items b#look

; Get an ID-prepended pairs list - for selecting by identifier
> List > Row Pairs
= (enumerateThings thingList)
; start at 1
@ ids | map inc | gen (len | thingList) id
| zip ids thingList

; TODO: Deprecated; remove
> List > Row Pairs
= (itemLooksMsg items)
| enumerateThings | listFromRow (itemLooks items)

; TODO: Add room description
= (lookMsg roomId state)
@ itemIds | getItemIds roomId state ; row of ids
@ items | filterItems itemIds state ; filtered map
@ enumerated | enumerateThings | itemLooks items
@ printableEnumerated | map (x & (barCat [(natBar | showNat (idx 0 x)) b#{ - } (idx 1 x)])) enumerated
@ preamble |
           , b#{you see:}
             b#{}
             b#{id   item}
             b#{------------}
| if (len itemIds)
  | barCat | intersperse barNewline (weld preamble printableEnumerated)
b#{there is nothing here}

= (helpMsg state)
| barCat
| intersperse barNewline
  , b#{++ Command Help ++}
    b#{==================}
    b#{}
    b#{ - Help: h (this command)}
    b#{ - Moving: n e s w (to move north, east, south, west)}
    b#{ - Look Around: l (will return a list of things with ids for further interaction}
    b#{ - Inspect Things: i <ID> (ID of thing from "look")}
    b#{ - Get Things: get <ID> (ID of thing from "look")}

> Bar > Nat > (Nat, Bar)
= (handleSingleCmd cmd state)
| if (has cmd [b#n b#e b#s b#w])
  | trk [%cmdState state]
  @ newRoomId | go cmd state
  | trk [%rid newRoomId]
  @ newState | up [b#playerMove newRoomId] state
  | trk [%newS newState]
  @ msg | barCat | intersperse barNewline [(message newState state cmd) (lookMsg newRoomId newState)]
  [newState msg]
| if (eql cmd b#{l})
  [state (lookMsg (curPos state) state)]
| if (eql cmd b#{h})
  [state (helpMsg state)]
| invalid state

= (getItemIdFromEnumerated enumeratedId roomId state)
@ itemIds | getItemIds roomId state
| get itemIds (dec enumeratedId)
; identify which item id this id denotes
;   - see what transient IDs come out of enumeration
;   - derive actual item ID from this

=?= 2
  ; the first item in room 2
  | getItemIdFromEnumerated 1 2 gis

=?= 3
  ; the second item in room 2
  | getItemIdFromEnumerated 2 2 gis

=?= 1
  | getItemIdFromEnumerated 1 1 gis

; given a room id and an enumerated item id, pick up that item.
> PlayerId > EnumID > RoomID > State > (State, Msg)
= (takeItemId playerId enumeratedId roomId state)
@ itemId | getItemIdFromEnumerated enumeratedId roomId state
@ item | itemGet itemId state
@ newState | itemLocationSetPlayer itemId playerId state
@ msg | barCat [b#{you got } (tabGet item b#look)]
[newState msg]

; TODO
; given a room id and an enumerated inventory id, drop up that item.
> PlayerId > EnumID > RoomID > State > (State, Msg)
= (dropItemId playerId enumeratedId roomId state)
;@ itemId | getItemIdFromEnumerated enumeratedId roomId state
;@ item | itemGet itemId state
;@ newState | itemLocationSetPlayer itemId playerId state
;@ msg | barCat [b#{you got } (tabGet item b#look)]
;[newState msg]
0

= (handleDuoCmd cmd target state)
| if (eql cmd b#{i})
  ; TODO:
  [state (barCat [b#{you inspect } (barCat | target)]) ]
| if (eql cmd b#{get})
  ; TODO:
  | takeItemId 9 target (curPos state) state
| invalid state

; return state
= (commandDo input state)
@ (cmd) | listToRow | barSplit { } | barTakeWhile (neq newlineChar) input ; when seeding
| if (eql 1 | len cmd)
* handleSingleCmd (idx 0 cmd) state
* handleDuoCmd (idx 0 cmd) (drop 1 cmd) state

= (tick state input)
@ [changed msg] | commandDo input state
| trk [%changed changed]
@ newState | changed
; @ newPosition | go dir currentPosition
; @ msg | message currentPosition newPosition dir
| (print newState msg, tick newState)

print 1 (barUnlines b{welcome. move with any of n e s w followed by <enter>})
= main | tick gis

; = (showTodo todo)
; ^ barWeld _ barNewline
; | barIntercalateList barNewline
; : (done,name) < listForEach todo
; ^ barWeld _ name
; | if done
; * b#{[x] }
; * b#{[ ] }
; 
; = (addItem name todo)
; | listNub ((FALSE,name) :: todo)
; 
; = (deleteItem name todo)
; | listFilter (_,n)&(n /= name) todo
; 
; = (doneItem name todo)
; : (done,n) < listForEach todo
; | (done || n==name, n)
; 
; = (step state input)
; @ (cmd, item) | barSplitOne { } | barTakeWhile (neq newlineChar) input
; # switch cmd
; * b#add
;   @ state | addItem item state
;   | (showTodo state, step state)
; * b#del
;   @ state | deleteItem item state
;   | (showTodo state, step state)
; * b#done
;   @ state | doneItem item state
;   | (showTodo state, step state)
; * b#show
;   | (showTodo state, step state)
; * _
;   ^ (_, step state)
;   | barCat [(showTodo state) barNewline b#{Invalid command: } input]
; 
; = main | step ~[]

