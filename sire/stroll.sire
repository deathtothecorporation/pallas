; Copyright 2023 The Plunder Authors
; Use of this source code is governed by a BSD-style license that can be
; found in the LICENSE file.

#### stroll <- sieve

;;;; Stroll
;;;; ======
;;;;
;;;; A different way to Roam locally.


;;; Imports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:| sire
:| datom
:| gen
:| stew


;;; Schema ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

= strollSchema
^ assertTransact _ emptyDB
; Page attributes
++ ## ={:db/ident} {:page/title}
   ## ={:db/unique} TRUE
   ## ={:db/doc}
       {When set on a block, that block is treated as a page with this title.}
; Block attributes
++ ## ={:db/ident} {:block/string}
   ## ={:db/cardinality} {one}
   ## ={:db/doc} {String content of a block}
++ ## ={:db/ident} {:block/uid}
   ## ={:db/cardinality} {one}
   ## ={:db/unique} TRUE
   ## ={:db/doc} {User referable text name for a block}
++ ## ={:db/ident} {:block/children}
   ## ={:db/cardinality} {many}
   ## ={:db/valueType} {ref}
   ## ={:db/doc} {Reference to all blocks under this block}
++ ## ={:db/ident} {:block/page}
   ## ={:db/cardinality} {one}
   ## ={:db/valueType} {ref}
   ## ={:db/indexed} TRUE
   ## ={:db/doc} {Reference to the page this block is displayed on.}
++ ## ={:db/ident} {:block/refs}
   ## ={:db/cardinality} {many}
   ## ={:db/valueType} {ref}
   ## ={:db/doc} {Reference to all blocks `:block/string` textually refers to.}
++ ## ={:db/ident} {:block/order}
   ## ={:db/cardinality} {one}
   ## ={:db/doc} {The order of these blocks in the list of `:block/children`.}

; Deliberately skipping :block/parents because we have a VAE table, unlike
; datascript. The data from :block/parents is derivable from :block/children,
; and will give you the order instead of having to calculate that after the
; fact.


; TODO: The above is the minimal viable stroll. There are a TON of things we
; want to look into:
;
; - Item filtering in the references section.
;
;   - Roam sticks a monolithic object in `:window/filters` on the block's eid
;     for filtering references positively or negatively. This is more than a
;     little brittle and also implies that they aren't using them in :find.
;
;   - logseq's datascript usage is ephemeral with the markdown files being
;     the persistent store. They just stick this data in a raw bullet point.
;
; - Open states
;
;   - A block is open or not and this is stored on the block, instead of being
;     open or not on a specific page, which is usually what you want?
;
; - Hierarchy view
;
;   - logseq's hierarchy view is just such a good feature and it's very
;     revealing that Roam hasn't or can't copy it. We should just verbatim
;     copy this feature because it's super useful and only costs a single
;     attribute per :page entity that participates in a hierarchy.
;
; - Aliases
;
;   - Roam has refused to implement this feature for basically its entire
;     existence when it's the most requested feature of the product. logseq
;     has aliases and it's actually super trivial, just add a {:page/alias}
;     attribute and check for aliases every place you'd other look for
;     {:page/title}.
;
; - Journal
;
;   - The "Daily Notes" style pages are the killer organizational feature of
;     both Roam, logseq and other imitators. But this involves another
;     attribute in ":page/" to support.


;;; Utils ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; These are general and should be moved elsewhere

; We need to be able to generate random uids, which are like base64 but with
; {-} and {_} instead of {+} and {/}.

= base64hepbar
  b#{ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_}

abstype#Gen
abstype#Error
abstype#Uid

> Gen > [Gen Nat]
= (genUid gen)
@ [gen l]
  ^ foldl _ [gen NIL] [0 1 2 3 4 5 6 7 8 9]
  & ([gen xs] i)
  @ [gen res] | genBitsNat 6 gen
  [gen (CONS (barIdx res base64hepbar) xs)]
@ uid | listFoldl strWeld {} l
[gen uid]

= (assertRight x)
| fromRight ({assertion failed} x) x


;;; Database Record ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# record StrollDb
| STROLL_DB gen:Rand db:Db

> Nat > StrollDb
= (emptyStrollDb seed)
@ gen | mkRand seed
| STROLL_DB gen strollSchema

> Any > StrollDb > > Either (Row Error) StrollDb
= (transactStrollDb txn strollDb)
@ STROLL_DB(..) strollDb
;| trk [%txn db]
# datacase | transact txn db
* (LEFT l) | LEFT l
* (RIGHT r) | RIGHT | STROLL_DB gen r

> Any > StrollDb > StrollDb
= (assertTransactStrollDb txn strollDb)
# datacase (transactStrollDb txn strollDb)
* (LEFT l)
    | trk [%l l]
    | {stroll transaction failed: } l
* (RIGHT r) r

; Generates a unique id, checking that the uid isn't in the database
;
> StrollDb > [uid StrollDb]
= (generateUniqueID strollDb)
@ STROLL_DB(..) strollDb
; generate a unique uid that doesn't exist in the database yet.
@ [gen uid]
    ^ _ gen
    ? (loop gen)
    @ [gen uid] | genUid gen
    @ matches | lookupByAV {:block/uid} uid db
    | if | setIsEmpty matches
        [gen uid]
    | loop gen
[uid (STROLL_DB gen db)]


;;; Queries ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Imagine you are writing a web frontend for the above and you want to deal
; with it entirely with pulls. This is contrived, since at least logseq's
; implementation of a Roam-like uses complex :find queries all over the place
; with comparatively few pulls. (I did pull first since the datascript designer
; said he doesn't reach for pulls in normal webapps, but the one example app I
; can find actually makes extensive use of them.)

childrenQuery=[{:block/children}=[{:block/uid} {:block/order}]]

; Find the implicit block that make up a page, along with all its children.
= (findPageBlock pageTitle strollDb)
@ STROLL_DB(..) strollDb
| pull ++ {:block/uid}
       ++ childrenQuery
       [{:page/title} pageTitle]
       db

; Given a row of all the child blocks sorted by order, list the data for each
; block for display.
> Row Any > Db > Either (List Error) (List (Tab Any Any))
= (findBlocksContent q strollDb)
@ STROLL_DB(..) strollDb
| pullMany ++ {:block/uid}
           ++ {:block/string}
           ++ childrenQuery
           q
           db

= (sortRowTabByOrder t)
^ sortOn _ t
& x
| fromSome 0 | tabLookup {:block/order} x

; Given any result map which contains a childrenQuery, produce an ordered list
; of uids to lookup sorted on order.
= (makeOrderedChildrenQuery s)
@ rowOfTab | fromSome [] | tabLookup {:block/children} s
: r < foreach (sortRowTabByOrder rowOfTab)
[{:block/uid} (fromSome ({missing uid} 0) | tabLookup {:block/uid} r)]

= (findBlocksChildrenUnsorted uid strollDb)
@ STROLL_DB(..) strollDb
# datacase | pull [childrenQuery] [{:block/uid} uid] db
* (LEFT l) []
* (RIGHT r)
    | fromSome []
    | tabLookup {:block/children} r


; Given a block, find all blocks which reference this block and the page
; they're on.
;
; The output of this pull is why the normal query interface is so nice: instead
; of returning a list of tuples, this returns a weird large nested structure of
; tabs and sets and rows. The data is in there, but it's pretty cumbersome to
; work with.
;
= (findPageBlocksReferencing x strollDb)
@ STROLL_DB(..) strollDb
@ uid | fromSome {} | tabLookup {:block/uid} x
| pull ++ ## ={:block/_refs} ++ {:block/uid}
                             ++ ## ={:block/page} ++ {:block/uid}
                                                  ++ {:page/title}
       [{:block/uid} uid]
       db

= (getEidOf uid strollDb)
@ STROLL_DB(..) strollDb
| setMin
| lookupByAV {:block/uid} uid db

; Returns the uid of the parent
;
= (getParentOf uid strollDb)
@ STROLL_DB(..) strollDb
| fromSome {}
| tabLookup {:block/uid}
| idx 0
| fromSome []
| tabLookup {:block/children}
| assertRight
| pull [[{:block/_children}=[{:block/uid}]]]
       [{:block/uid} uid]
       db

; Get the block order by eid.
;
= (getOrderByEid eid strollDb)
@ STROLL_DB(..) strollDb
| setMin
| lookupByAE {:block/order} eid db

= (getPageByEid eid strollDb)
@ STROLL_DB(..) strollDb
; if this eid has a :page/title, it is a page.
| ifNot (setIsEmpty | lookupByAE {:page/title} eid db) eid
| setMin | lookupByAE {:block/page} eid db

; Given a uid, find all the eids of all the blocks this uid forward references
;
; TODO: this is another function where query would be cleaner
= (findAllRefEids uid strollDb)
@ STROLL_DB(..) strollDb
| map [k v]&v
| catMap tabToPairs
| fromSome [] ; catMap expects a row of tabs
| tabLookup {:block/refs}
| assertRight
| pull ++ ## ={:block/refs} ++ {:db/id}
       [{:block/uid} uid]
       db

; Given a uid, find all the uids of all the blocks this uid forward references
= (findAllRefUids uid strollDb)
@ STROLL_DB(..) strollDb
| map [k v]&v
| catMap tabToPairs
| fromSome [] ; catMap expects a row of tabs
| tabLookup {:block/refs}
| assertRight
| pull [[{:block/refs}=[{:block/uid}]]]
       [{:block/uid} uid]
       db

= (findAllChildUids uid strollDb)
| map x&(fromSome {} | tabLookup {:block/uid} x)
| findBlocksChildrenUnsorted uid strollDb

> (Nat -> Nat) > Str > Nat > StrollDb > StrollDb
= (childrenUpdatesAfter fun parentUid pos strollDb)
; all children pulled from the database
@ children | findBlocksChildrenUnsorted parentUid strollDb
^ mapMaybe _ children
& node
: uid < maybeCase (tabLookup {:block/uid} node) NONE
: order < maybeCase (tabLookup {:block/order} node) NONE
| if (lth order pos)
    | NONE
; TODO: If I allow reading of raw EID numbers during a pull via a virtual
; {:db/id} like Datomic, we can get rid of the overhead of this lookup
; here, which is probably small in this one instance, but is a unneeded
; repeated lookup over all queries.
| SOME [%add [{:block/uid} uid] {:block/order} (fun order)]

; Create entries for a transaction which changes each block to a different page
; uid.
;
> Str > Nat > StrollDb > Row Any
= (mkPageUpdates uid dstEid strollDb)
| cat
| rowCons [[%add [{:block/uid} uid] {:block/page} dstEid]]
| map u&(mkPageUpdates u dstEid strollDb)
| findAllChildUids uid strollDb

; Given a block, add a new empty child at position X.
;
; This involves increasing the order of every block after pos and creating a
; new block at pos.
= (insertEmptyBlock parentUid pos strollDb)
@ [uid strollDb] | generateUniqueID strollDb
@ STROLL_DB(..) strollDb
; new tuples for child nodes that must be updated.
@ childUpdates | childrenUpdatesAfter inc parentUid pos strollDb
;
@ page
    ; TODO: this would work better as a query, since that would just return the
    ; eid directly.
    | fromSome ({missing :block/page} 0)
    | tabLookup {:block/page}
    | idx 1
    | pull [{:block/page}] [{:block/uid} parentUid] db
@ newItem
    ## ={:block/uid} uid
    ## ={:block/string} {}
    ## ={:block/order} pos
    ## ={:block/page} page
;
@ addChild
    ## ={:db/id} [{:block/uid} parentUid]
    ## ={:block/children} newItem
@ total | rowCons addChild childUpdates
# datacase  | transact total db
* (LEFT l)  | LEFT l
* (RIGHT r) | RIGHT | STROLL_DB gen r

; Creates a new page with a new single empty bullet on it and returns the uid
; of the created page.
;
> Str > StrollDb > [Uid StrollDb]
= (makeNewPage pageTitle strollDb)
@ [pointUid strollDb] | generateUniqueID strollDb
@ [pageUid strollDb]  | generateUniqueID strollDb
^ [pageUid _]
^ assertTransactStrollDb _ strollDb
++ ## ={:db/id} %[{newpage}]
   ## ={:page/title} pageTitle
   ## ={:block/uid} pageUid
   ## ={:block/children}
      ++ ## ={:block/string} {}
         ## ={:block/uid} pointUid
         ## ={:block/order} 0
         ## ={:block/page} %[{newpage}]

; Given a page title, resolves it to a uid, creating the page if necessary.
;
> Str > StrollDb > [Uid StrollDb]
= (pageToUid pageTitle strollDb)
@ STROLL_DB(..) strollDb
@ eids | lookupByAV {:page/title} pageTitle db
| if | setIsEmpty eids
    | makeNewPage pageTitle strollDb
@ uids | lookupByAE {:block/uid} (setMin eids) db
[(setMin uids) strollDb]

; Parses a string for things which look like references.
;
> Str > List Str
= (parseRefs txt)
@ bar | natBar txt
@ len | barLen bar
| listToRow
^ _ 0 bar NIL
? (loop i bar out)
| if | gth i len
    out
| if | rowAnd ++ | eql (barIdx i bar) {(}
              ++ | eql (barIdx (inc i) bar) {(}
              ++ | eql (barIdx (add 11 i) bar) {)}
              ++ | eql (barIdx (add 12 i) bar) {)}
   ; todo: additionally validate that its base64
   @ ref | barNat | barSlice (add i 2) 9 bar
   | loop (add i 12) bar (CONS ref out)
| loop (inc i) bar out

=?=     [%bbCCddEE1 %aaBBccDD9]
    | parseRefs {One ((aaBBccDD9)) Three ((bbCCddEE1))}

; Parse inside links
=?=     [%bbCCddEE1]
    | parseRefs {Yesterday, [I wrote this](((bbCCddEE1)))}

; Parses titles out of the data
;
; This is tricky because you have to deal with page titles that contain page
; titles, and have to deal with malformed ones. (We deal with extra [[ or ]]
; on either side of the title.)
;
> Str > List Str
= (parseTitles txt)
@ bar | natBar txt
@ len | barLen bar
| listToRow
^ _ 0 bar NIL NIL
? (loop i bar stack out)
| if | gth i len
    out
| if | rowAnd ++ | eql (barIdx i bar) {[}
              ++ | eql (barIdx (inc i) bar) {[}
    ; we mark that this is where we have the beginning of a mark
    | loop (add 2 i) bar (CONS (add 2 i) stack) out
| if | rowAnd ++ | eql (barIdx i bar) {]}
              ++ | eql (barIdx (inc i) bar) {]}
    : x xs < listCase stack
                 ; extra unmatched right close. ignore it
                 | loop (add 2 i) bar stack out
    @ title | barNat | barSlice x (sub i x) bar
    | loop (add 2 i) bar xs (CONS title out)
| loop (inc i) bar stack out

; Simple case
=?=     [%Iceman]
    | parseTitles {[[Iceman]]}

;; Parse in links
=?=     [%Iceman]
    | parseTitles {[This dude]([[Iceman]])}

;; Simple recursive case
=?=     [{[[Word]] More} %Word]
    | parseTitles {[[[[Word]] More]]}

;; Extra {[[} on left
=?=     [{[[Word]] More} %Word]
    | parseTitles {[[ [[[[Word]] More]]}

;; Extra {]]} on right
=?=     [{[[Word]] More} %Word]
    | parseTitles {[[[[Word]] More]] ]]}

;; Parallel references
=?=     [{[[One]] and [[Two]]} {Two} {One}]
    | parseTitles {[[[[One]] and [[Two]]]]}


; Sets the text content of a block to a given string, extracting page titles
; and block references and then updating the correct ref attributes.
;
> Str > Str > StrollDb > StrollDb
= (setBlockText textUid text strollDb)
@ STROLL_DB(..) strollDb
; Calculate all the uid references that text refers to.
@ refs   | parseRefs text
@ [titleRefs strollDb]
    ^ foldl _ [NIL strollDb] | parseTitles text
    & ([titleRefs strollDb] i)
    @ [uid strollDb] | pageToUid i strollDb
    [(CONS uid titleRefs) strollDb]
;
@ newRefUids | weld refs | listToRow titleRefs
@ newRefEids
    | setCatRow
    | map uid&(lookupByAV {:block/uid} uid db) newRefUids
;
; Fetch the current references uids from textUid.
@ currentRefEids | setFromRow | findAllRefEids textUid strollDb
;
@ toAdd | setToRow | setSub newRefEids currentRefEids
@ toDel | setToRow | setSub currentRefEids newRefEids
;
^ assertTransactStrollDb (cat _) strollDb
++ [[%add [{:block/uid} textUid] {:block/string} text]]
++ | map a&[%add [{:block/uid} textUid] {:block/refs} a] toAdd
++ | map r&[%rm [{:block/uid} textUid] {:block/refs} r] toDel

; Moves a bullet point to a new parent, updating all references and page
; entries.
;
> Str > Str > Nat > StrollDb > StrollDb
= (reparent nodeUid newParentUid newOrder strollDb)
@ nodeEid      | getEidOf nodeUid strollDb
@ curParentUid | getParentOf nodeUid strollDb
@ curOrder     | getOrderByEid nodeEid strollDb
@ prevReorders | childrenUpdatesAfter dec curParentUid curOrder strollDb
@ newReorders  | childrenUpdatesAfter inc newParentUid newOrder strollDb
;
@ pageChanges
    @ curPage | getPageByEid nodeEid strollDb
    @ dstPage
      ^ getPageByEid _ strollDb
      | getEidOf newParentUid strollDb
    | if (curPage == dstPage) []
    ;
    ; we must reassign the page of the block and of every child block
    ; recursively.
    | mkPageUpdates nodeUid dstPage strollDb
;
^ assertTransactStrollDb (cat _) strollDb
++ [[%rm [{:block/uid} curParentUid] {:block/children} nodeEid]]
++ [[%add [{:block/uid} newParentUid] {:block/children} nodeEid]]
++ [[%add nodeEid {:block/order} newOrder]]
++ prevReorders
++ newReorders
++ pageChanges
